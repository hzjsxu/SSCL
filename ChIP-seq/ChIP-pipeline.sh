#!/bin/bash
# variables need to be defined firstly, otherwise would run failed (if defined in the bsub workflow).

outdir="."
rawdata_dir="raw_data_dir"
genome_bwa_index=XENTR_10.0_chrom.fasta

for sample in ${rawdata_dir}/*1.fq.gz;do
	sample=$(basename $sample _R1.fq.gz)
	R1=$rawdata_dir/${sample}_R1.fq.gz
	R2=$rawdata_dir/${sample}_R2.fq.gz
	cleanR1=${outdir}/cleandata/${sample}.clean_1P.fastq.gz
	cleanR2=${outdir}/cleandata/${sample}.clean_2P.fastq.gz

	if [ ! -d $outdir ];then
		mkdir -p ${outdir}
	fi
	bamdir=${outdir}

	echo -e "$(date '+%Y-%m-%d %H:%M:%S') $sample processing ... "

## 1. do qc for raw data (raw data refers to cleandata generated by sequencing).
	if [ ! -d $outdir/fastqc/clean_qc1 ];then
		mkdir -p $outdir/fastqc/clean_qc1
	fi

	fastqc -t 20 -o $outdir/fastqc/clean_qc1 $rawdata_dir/${sample}_R1.fq.gz
	fastqc -t 20 -o $outdir/fastqc/clean_qc1 $rawdata_dir/${sample}_R2.fq.gz
	echo -e "$(date '+%Y-%m-%d %H:%M:%S') $sample fastqc raw reads ..."

## 2. trim to remove low-quality sequences.
	if [ ! -d $outdir/cleandata ];then
		mkdir -p $outdir/cleandata
	fi

    java -jar /work/bio-xujs/biosoft/Trimmomatic/Trimmomatic-0.38/trimmomatic-0.38.jar PE -phred33 \
        -threads 20 $R1 $R2 \
        -baseout $outdir/cleandata/${sample}.clean.fastq.gz \
        ILLUMINACLIP:/work/bio-xujs/biosoft/Trimmomatic/Trimmomatic-0.38/adapters/TruSeq3-PE.fa:2:30:10 \
                        HEADCROP:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:90
	wait
	echo -e "$(date '+%Y-%m-%d %H:%M:%S') $sample Trimming ..."

## 3. do qc align to check quality.
	if [ ! -d $outdir/fastqc/qc2 ];then
		mkdir -p $outdir/fastqc/qc2
	fi

	fastqc -t 20 -o $outdir/fastqc/qc2 ${cleanR1}
	fastqc -t 20 -o $outdir/fastqc/qc2 ${cleanR2}
	wait
	echo -e "$(date '+%Y-%m-%d %H:%M:%S') $sample fastqc clean reads ..."

## 4. align the reads to the reference.
	bwa mem -t 20 $genome_bwa_index $cleanR1 $cleanR2 \
		1>${bamdir}/${sample}.sam 2>${bamdir}/${sample}.bwa.log
	wait
	samtools sort -O bam -@ 20 -o ${bamdir}/${sample}.sorted.bam ${bamdir}/${sample}.sam
	wait
	samtools view -h -@ 20 -q 20 -b ${bamdir}/${sample}.sorted.bam >${bamdir}/${sample}.sorted.q20.bam
	rm ${bamdir}/${sample}.sam ${bamdir}/${sample}.bwa.log
	echo -e "$(date '+%Y-%m-%d %H:%M:%S') $sample aligning ..."

## 5. remove PCR duplicates and convert bam to bw format.
	picard MarkDuplicates INPUT=${bamdir}/${sample}.sorted.q20.bam OUTPUT=${bamdir}/${sample}.sorted.q20.rmdup.bam \
				METRICS_FILE=${bamdir}/${sample}.sorted.q20.rmdup.metrics VALIDATION_STRINGENCY=LENIENT \
				REMOVE_DUPLICATES=TRUE MAX_FILE_HANDLES_FOR_READ_ENDS_MAP=1000

	samtools index -@ 20 ${bamdir}/${sample}.sorted.bam
	samtools index -@ 20 ${bamdir}/${sample}.sorted.q20.bam
	samtools index -@ 20 ${bamdir}/${sample}.sorted.q20.rmdup.bam

	bamCoverage -b ${bamdir}/${sample}.sorted.q20.rmdup.bam -o ${bamdir}/${sample}.BPM.bw -p 20 --binSize 10 --extendReads --minMappingQuality 20 --ignoreDuplicates --normalizeUsing BPM
	bamCoverage -b ${bamdir}/${sample}.sorted.q20.rmdup.bam -o ${bamdir}/${sample}.RPKM.bw -p 20 --binSize 10 --extendReads --minMappingQuality 20 --ignoreDuplicates --normalizeUsing RPKM
	echo -e "$(date '+%Y-%m-%d %H:%M:%S') $sample Generating bw tracks ..."
done